Q> Fail Fast and Fail Safe Iterators in Java How it Works ?

Fail-Fast iterators immediately throw ConcurrentModificationException if there is structural modification of the collection. 
Structural modification means adding, removing or updating any element from collection while a thread is iterating over that collection. 
examples:  ArrayList, HashMap classses.
To know whether the collection is structurally modified or not, fail-fast iterators use an internal flag called modCount which is updated 
each time a collection is modified.Fail-fast iterators checks the modCount flag whenever it gets the next value (i.e. using next() method),
and if it finds that the modCount has been modified after this iterator has been created, it throws ConcurrentModificationException.

Fail-Safe iterators don’t throw any exceptions if a collection is structurally modified while iterating over it. This is because, they operate on the clone of the collection, not on the original collection and that’s why they are called fail-safe iterators. Iterator on CopyOnWriteArrayList, ConcurrentHashMap classes are examples of fail-safe Iterator.

Q1> Advantages and disadvantages of static variable?

The static variables/methods belong to the class rather than an instance of the class.
They occupy memory in method area or pergem memory space where garbage collector never works .
You can not control creation and destruction of static variable. Usefully they have been created at program loading and 
destroyed when program unload (or when JVM shuts down).
so if we use static variable more there might be a change of cnsuming more memory which does not signify the purpose .
when do you need :then ?

---> Only use when a variable which is used globally ,Here global means across all the instances of a java class

Q2> Difference b/w PATCH and PUT?
PUT means replace the entire ebject/ json
PATCH means modify a specific value in an object/json
 {
 id : "483843847",
 name: "jitu",
 age : "28",
 company : "xyz"
 }
 consider the above json , if i just wanted to modify company name to abc  , i can do it throught patch 
 but if i want to change the entire object i have to make a put call , and might be in request i need to send the entire object again .
 cann't you achive the behaviour of PATCH using PUT ?
 yes ! you can , but the payload(request body) size would be more containing the full object structure, which will make the request heavy. 
 
 Q3> Sequential vs Parallel streams in java 8?
 What is Stream ? 
 Ans : stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels. Streams don't change the 
 original data structure, they only provide the result as per the pipelined methods.
 differnece b/w Sequential vs Parallel Stream :
 Ans : Parallel streams divide the provided task into many and run them in different threads, utilizing multiple cores of the computer.
 On the other hand sequential streams work just like for-loop using a single core.
 In parallel execution, if number of tasks are more than available cores at a given time, the remaining tasks are queued waiting for 
 currently running task to finish.
 The tasks provided to the streams are typically the iterative operations performed on the elements of a collection or array or from other dynamic sources. Parallel execution of streams run multiple iterations simultaneously in different available cores.
Q4> When to use Sequential and when to use Parallel streams ?
ans: when we use Parallel streams , we can not predict the oup put sequence , as its run paralally .
but when you want to retain  the o/p sequence , then go for normal streams.

Q5> how to filter a list using stream with multiple condition ?

List<String> names = Arrays.asList("Melisandre","Sansa","Jon","Daenerys","Joffery");
        List<String> longnames = names.stream()  
                .filter(str -> str.length() > 6 && str.length() < 8) //Multiple conditions
                .collect(Collectors.toList());  
        longnames.forEach(System.out::println);
Q6> What is map() and flatMap() in Java 8 Stream ?

Map take a Stream and transform it to another Stream. where as flatMap first apply map function and than flattens the result .
FlatMap example :-
List evens = Arrays.asList(2, 4, 6);
List odds = Arrays.asList(3, 5, 7);
List primes = Arrays.asList(2, 3, 5, 7, 11);
       
List numbers = Stream.of(evens, odds, primes)
               .flatMap(list -> list.stream())
               .collect(Collectors.toList());
       
System.out.println("flattend list: " + numbers);

Output:
flattend list: [2, 4, 6, 3, 5, 7, 2, 3, 5, 7, 11]

Map example : 
List listOfIntegers = Stream.of("1", "2", "3", "4")
               .map(Integer::valueOf)
               .collect(Collectors.toList());
Q6> 
Remove Elements/Objects From ArrayList in Java?
Iterator<Integer> itr = numbers.iterator();

// remove all even numbers
while (itr.hasNext()) {
    Integer number = itr.next();

       if (number % 2 == 0) {
       itr.remove();// if you use number.remove() you will et exception;
    }

}

Q7> How to Write custom Exception ?
Ans: 
public class MyUncheckedBusinessException extends RuntimeException {

	private final ErrorCode code;

	public MyUncheckedBusinessException(ErrorCode code) {
		super();
		this.code = code;
	}

	public MyUncheckedBusinessException(String message, Throwable cause, ErrorCode code) {
		super(message, cause);
		this.code = code;
	}

	public MyUncheckedBusinessException(String message, ErrorCode code) {
		super(message);
		this.code = code;
	}

	public MyUncheckedBusinessException(Throwable cause, ErrorCode code) {
		super(cause);
		this.code = code;
	}
	
	public ErrorCode getCode() {
		return this.code;
	}
}

call the function like this :

private void wrapException(String input) {
	try {
		// do something
	} catch (NumberFormatException e) {
		throw new MyUncheckedBusinessException("A message that describes the error.", e, ErrorCode.INVALID_PORT_CONFIGURATION);
	}
}

Q8> SpringBoot Exception Hnadle ?

public class ApiError {
 
    private HttpStatus status;
    private String message;
    private List<String> errors;
 
    public ApiError(HttpStatus status, String message, List<String> errors) {
        super();
        this.status = status;
        this.message = message;
        this.errors = errors;
    }
 
    public ApiError(HttpStatus status, String message, String error) {
        super();
        this.status = status;
        this.message = message;
        errors = Arrays.asList(error);
    }
}

@ControllerAdvice
public class RestResponseEntityExceptionHandler 
  extends ResponseEntityExceptionHandler {
 
    @ExceptionHandler({ Exception.class })
    public ResponseEntity<Object> handleAll(Exception ex, WebRequest request) {
    ApiError apiError = new ApiError(
      HttpStatus.INTERNAL_SERVER_ERROR, ex.getLocalizedMessage(), "error occurred");
    return new ResponseEntity<Object>(
      apiError, new HttpHeaders(), apiError.getStatus());
}
     
    ...
}
 
Q9>validation in Springboot bean ?
@Size(min = 3, max = 20)
@Pattern(regexp=".+@.+\\.[a-z]+")
@max
@min
@NotNull(message = "First name is compulsory")
@NotBlank(message = "First name is compulsory")
@Pattern(regexp = "[a-z-A-Z]*", message = "First name has invalid characters")

use @valid to the baan like this ?

findElement(@valid @ResponseBody Employee e) {
}

Q10> What is spring Actuator ?
Q11> some important usefull  springboot Annotations?

> @Bean
This annotation is used at the method level. @Bean annotation works with @Configuration to create Spring beans
if we want to create a bean and register it to a springcontainer then use this @bean , 
exa:
@Configuration
public class AppConfig {
    @Bean
    public TransferService transferService() {
        return new TransferServiceImpl();
    }
}
> @Lazy
This annotation is used on component classes. By default all autowired dependencies are created and configured at startup. 
But if you want to initialize a bean lazily, you can use @Lazy annotation over the class. 
This means that the bean will be created and initialized only when it is first requested for. 
You can also use this annotation on @Configuration classes. This indicates that all @Bean methods within that @Configuration should be
lazily initialized.

> @EnableAutoConfiguration    vs   @ComponentScan ?
@EnableAutoConfiguration annotation tells Spring Boot to "guess" how you will want to configure Spring, based on the jar dependencies
 that you have added. For example, If HSQLDB is on your classpath, and you have not manually configured any database connection beans,
then Spring will auto-configure an in-memory database.
@EnableAutoConfiguration automatically configures the Spring application based on its included jar files, 
it sets up defaults or helper based on dependencies in pom.xml. 
Auto-configuration is usually applied based on the classpath and the defined beans. Therefore,
\we donot need to define any of the DataSource, EntityManagerFactory, TransactionManager etc and magically based on the classpath, 
Spring Boot automatically creates proper beans and registers them for us. 

@ComponentScan : 
it provides scope for spring component scan, it simply goes though the provided base package and picks up dependencies
required by @Bean or @Autowired etc

> SpringBootApplication 
Actually the @SpringBootApplication annotation is equivalent to using @Configuration, @EnableAutoConfiguration and
@ComponentScan with their default attributes.

>@InitBinder
This annotation is a method level annotation that plays the role of identifying the methods which initialize the WebDataBinder -
a DataBinder that binds the request parameter to JavaBean objects. To customise request parameter data binding , 
you can use @InitBinder annotated methods within our controller. The methods annotated with @InitBinder all argument types that handler methods support.
The @InitBinder annotated methods will get called for each HTTP request if you don’t specify the value element of this annotation.
The value element can be a single or multiple form names or request parameters that the init binder method is applied to.



Q12> what is Spring Boot CLI?
 The Spring Boot CLI is a Command Line Interface for Spring Boot.
 It can be used for a quick start with Spring.
 It can run Groovy scripts which means that a developer need not write boilerplate code; 
 all that is needed is focus on business logic.Spring Boot CLI is the fastest way to create a Spring-based application.

Q14> Difference between @RequestParam and @RequestAttribute?

@RequestAttribute is to access objects which have been populated on the server-side but during the same HTTP request, 
for example they can be populated in an interceptor or a filter.
exa?
The interceptor
public class MyCounterInterceptor extends HandlerInterceptorAdapter {
  private AtomicInteger counter = new AtomicInteger(0);

  @Override
  public boolean preHandle (HttpServletRequest request,
                            HttpServletResponse response,
                            Object handler) throws Exception {

      request.setAttribute("visitorCounter", counter.incrementAndGet());// set the value from interceptor
      return true;
  }
}
The controller
@Controller
public class ExampleController {

  @RequestMapping("/")
  @ResponseBody
  public String handle (@RequestAttribute("visitorCounter") Integer counter) {
      return String.format("Visitor number: %d", counter);
  }
}

@QueryParam and @RequestParam both are same , but @RequestParam is from spring , but QueryParam is from JAXRS

Q> @ConditionalOnProperty?




