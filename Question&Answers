Q> Fail Fast and Fail Safe Iterators in Java How it Works ?

Fail-Fast iterators immediately throw ConcurrentModificationException if there is structural modification of the collection. 
Structural modification means adding, removing or updating any element from collection while a thread is iterating over that collection. 
examples:  ArrayList, HashMap classses.
To know whether the collection is structurally modified or not, fail-fast iterators use an internal flag called modCount which is updated 
each time a collection is modified.Fail-fast iterators checks the modCount flag whenever it gets the next value (i.e. using next() method),
and if it finds that the modCount has been modified after this iterator has been created, it throws ConcurrentModificationException.

Fail-Safe iterators don’t throw any exceptions if a collection is structurally modified while iterating over it. This is because, they operate on the clone of the collection, not on the original collection and that’s why they are called fail-safe iterators. Iterator on CopyOnWriteArrayList, ConcurrentHashMap classes are examples of fail-safe Iterator.

Q1> Advantages and disadvantages of static variable?

The static variables/methods belong to the class rather than an instance of the class.
They occupy memory in method area or pergem memory space where garbage collector never works .
You can not control creation and destruction of static variable. Usefully they have been created at program loading and 
destroyed when program unload (or when JVM shuts down).
so if we use static variable more there might be a change of cnsuming more memory which does not signify the purpose .
when do you need :then ?

---> Only use when a variable which is used globally ,Here global means across all the instances of a java class

Q2> Difference b/w PATCH and PUT?
PUT means replace the entire ebject/ json
PATCH means modify a specific value in an object/json
 {
 id : "483843847",
 name: "jitu",
 age : "28",
 company : "xyz"
 }
 consider the above json , if i just wanted to modify company name to abc  , i can do it throught patch 
 but if i want to change the entire object i have to make a put call , and might be in request i need to send the entire object again .
 cann't you achive the behaviour of PATCH using PUT ?
 yes ! you can , but the payload(request body) size would be more containing the full object structure, which will make the request heavy. 
 
 Q3> Sequential vs Parallel streams in java 8?
 What is Stream ? 
 Ans : stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels. Streams don't change the 
 original data structure, they only provide the result as per the pipelined methods.
 differnece b/w Sequential vs Parallel Stream :
 Ans : Parallel streams divide the provided task into many and run them in different threads, utilizing multiple cores of the computer.
 On the other hand sequential streams work just like for-loop using a single core.
 In parallel execution, if number of tasks are more than available cores at a given time, the remaining tasks are queued waiting for 
 currently running task to finish.
 The tasks provided to the streams are typically the iterative operations performed on the elements of a collection or array or from other dynamic sources. Parallel execution of streams run multiple iterations simultaneously in different available cores.
Q4> When to use Sequential and when to use Parallel streams ?
ans: when we use Parallel streams , we can not predict the oup put sequence , as its run paralally .
but when you want to retain  the o/p sequence , then go for normal streams.

Q5> how to filter a list using stream with multiple condition ?

List<String> names = Arrays.asList("Melisandre","Sansa","Jon","Daenerys","Joffery");
        List<String> longnames = names.stream()  
                .filter(str -> str.length() > 6 && str.length() < 8) //Multiple conditions
                .collect(Collectors.toList());  
        longnames.forEach(System.out::println);
Q6> What is map() and flatMap() in Java 8 Stream ?

Map take a Stream and transform it to another Stream. where as flatMap first apply map function and than flattens the result .
FlatMap example :-
List evens = Arrays.asList(2, 4, 6);
List odds = Arrays.asList(3, 5, 7);
List primes = Arrays.asList(2, 3, 5, 7, 11);
       
List numbers = Stream.of(evens, odds, primes)
               .flatMap(list -> list.stream())
               .collect(Collectors.toList());
       
System.out.println("flattend list: " + numbers);

Output:
flattend list: [2, 4, 6, 3, 5, 7, 2, 3, 5, 7, 11]

Map example : 
List listOfIntegers = Stream.of("1", "2", "3", "4")
               .map(Integer::valueOf)
               .collect(Collectors.toList());
Q6> 
Remove Elements/Objects From ArrayList in Java?
Iterator<Integer> itr = numbers.iterator();

// remove all even numbers
while (itr.hasNext()) {
    Integer number = itr.next();

       if (number % 2 == 0) {
       itr.remove();// if you use number.remove() you will et exception;
    }

}


 
 
